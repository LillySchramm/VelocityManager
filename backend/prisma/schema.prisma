// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

model Player {
  id                 String       @id
  name               String       @unique
  lastContact        BigInt       @default(0)
  currentGameServer  GameServer?  @relation(fields: [gameServerId], references: [id])
  currentProxyServer ProxyServer? @relation(fields: [proxyServerId], references: [id])
  gameServerId       String?
  proxyServerId      String?
  kicks              Kick[]
}

model Kick {
  id        String   @id @default(uuid())
  reason    String
  timestamp DateTime @default(now())

  player   Player @relation(fields: [playerId], references: [id])
  playerId String
}

model ServerType {
  id         String       @id @default(uuid())
  name       String       @unique
  default    Boolean      @default(false)
  deletable  Boolean      @default(true)
  GameServer GameServer[]
}

model GameServer {
  id             String   @id @default(uuid())
  name           String   @db.VarChar(255)
  lastContact    BigInt
  createdAt      DateTime @default(now())
  ip             String   @default("")
  port           Int
  maximumPlayers Int      @default(0)

  serverType   ServerType @relation(fields: [serverTypeId], references: [id])
  serverTypeId String
  Player       Player[]
}

model ProxyServer {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(255)
  lastContact BigInt
  createdAt   DateTime @default(now())
  Player      Player[]
}

model APIKey {
  id          String       @id @default(uuid())
  key         String       @db.VarChar(255)
  name        String       @db.VarChar(255)
  permissions Permission[]
  createdBy   Account      @relation(fields: [accountId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  accountId   String       @db.VarChar(255)
}

model Permission {
  id          String  @id @default(uuid())
  name        String  @unique
  description String
  default     Boolean @default(false)

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  AccountPermission AccountPermission[]
  apiKeys           APIKey[]
}

model PermissionScope {
  id String @id @default(uuid())

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  AccountPermission AccountPermission[]
}

model AccountPermission {
  id         String           @id @default(uuid())
  account    Account          @relation(fields: [accountId], references: [id])
  permission Permission       @relation(fields: [permissionId], references: [id])
  scope      PermissionScope? @relation(fields: [permissionScopeId], references: [id])

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  accountId         String   @db.VarChar(255)
  permissionId      String
  permissionScopeId String?
}

model Account {
  id        String  @id @db.VarChar(255)
  name      String
  activated Boolean @default(false)
  admin     Boolean @default(false)

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  AccountPermission AccountPermission[]
  APIKey            APIKey[]
}
