stages:
    - pre-build
    - build
    - container-build
    - java-docs
    - linting

variables:
    MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
    MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"

.cache0: &npm-cache
    key: $CI_COMMIT_REF_SLUG-npm
    paths:
        - backend/node_modules/
        - frontend/node_modules/
    policy: pull

.cache1: &maven-cache
    key: $CI_COMMIT_REF_SLUG-maven
    paths:
        - .m2/repository
    policy: pull

build_lib:
    image: maven:3.8.4-eclipse-temurin-16
    stage: pre-build
    cache:
        <<: *maven-cache
        policy: pull-push
    script:
        - cd lib && mvn install

install_npm_dependencies:
    image: node:14-alpine
    stage: pre-build
    cache:
        <<: *npm-cache
        policy: pull-push
    script:
        - cd backend && yarn
        - cd ../frontend && yarn

build_spigot:
    image: maven:3.8.4-eclipse-temurin-16
    stage: build
    needs:
        - build_lib
    artifacts:
        untracked: false
        expire_in: 1 week
        paths:
            - spigot/target/*.jar
    script:
        - cd spigot && mvn package
    cache:
        <<: *maven-cache

build_velocity:
    image: maven:3.8.4-eclipse-temurin-16
    stage: build
    needs:
        - build_lib
    artifacts:
        untracked: false
        expire_in: 1 week
        paths:
            - velocity/target/*.jar
    script:
        - cd velocity && mvn package
    cache:
        <<: *maven-cache

build_backend:
    image: node:14-alpine
    stage: build
    needs:
        - install_npm_dependencies
    artifacts:
        untracked: false
        expire_in: 1 week
        paths:
            - backend/index.js
            - backend/dist
            - backend/node_modules/.prisma/client/libquery_engine-linux-musl.so.node
    cache:
        <<: *npm-cache
    script:
        - cd backend
        - npx prisma generate
        - yarn run build

build_frontend:
    image: node:14-alpine
    stage: build
    needs:
        - install_npm_dependencies
    artifacts:
        untracked: false
        expire_in: 1 week
        paths:
            - frontend/dist
    cache:
        <<: *npm-cache
    script:
        - cd frontend && npx ng build --configuration production

build_backend_container:
    stage: container-build
    image:
        name: "gcr.io/kaniko-project/executor:debug"
        entrypoint: [""]
    needs:
        - install_npm_dependencies
        - build_backend
    script:
        - mkdir -p /kaniko/.docker
        - echo "{\"auths\":{\"registry01.eps-dev.de\":{\"auth\":\"$(printf "%s:%s" "${PRIVATE_REG_USER}" "${PRIVATE_REG_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
        - >-
            /kaniko/executor
            --context "${CI_PROJECT_DIR}/backend"
            --dockerfile "${CI_PROJECT_DIR}/backend/Dockerfile"
            --destination "registry01.eps-dev.de/velocitymanager/backend/${CI_COMMIT_REF_SLUG}:${CI_COMMIT_SHA}"
            --destination "registry01.eps-dev.de/velocitymanager/backend/${CI_COMMIT_REF_SLUG}:latest"

build_frontend_container:
    stage: container-build
    image:
        name: "gcr.io/kaniko-project/executor:debug"
        entrypoint: [""]
    needs:
        - build_frontend
    script:
        - mkdir -p /kaniko/.docker
        - echo "{\"auths\":{\"registry01.eps-dev.de\":{\"auth\":\"$(printf "%s:%s" "${PRIVATE_REG_USER}" "${PRIVATE_REG_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
        - >-
            /kaniko/executor
            --context "${CI_PROJECT_DIR}/frontend"
            --dockerfile "${CI_PROJECT_DIR}/frontend/Dockerfile"
            --destination "registry01.eps-dev.de/velocitymanager/frontend/${CI_COMMIT_REF_SLUG}:${CI_COMMIT_SHA}"
            --destination "registry01.eps-dev.de/velocitymanager/frontend/${CI_COMMIT_REF_SLUG}:latest"

prettier:
    image: node:14-alpine
    stage: linting
    allow_failure: true
    needs: []
    before_script:
        - npm install -g prettier prettier-plugin-java
    script:
        - npx prettier --check .

build-javadocs:
    image: maven:3.8.4-eclipse-temurin-16
    stage: java-docs
    needs:
        - build_lib
        - build_velocity
        - build_spigot
    artifacts:
        untracked: false
        expire_in: 1 week
        paths:
            - lib/target/site/apidocs/**
            - spigot/target/site/apidocs/**
            - velocity/target/site/apidocs/**
    cache:
        <<: *maven-cache
    script:
        - cd lib && mvn javadoc:javadoc
        - cd ../spigot && mvn javadoc:javadoc
        - cd ../velocity && mvn javadoc:javadoc
    only:
        - main

build-javadocs-container:
    image:
        name: "gcr.io/kaniko-project/executor:debug"
        entrypoint: [""]
    stage: java-docs
    needs:
        - build-javadocs
    script:
        - mkdir -p /kaniko/.docker
        - echo "{\"auths\":{\"registry01.eps-dev.de\":{\"auth\":\"$(printf "%s:%s" "${PRIVATE_REG_USER}" "${PRIVATE_REG_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
        - >-
            /kaniko/executor
            --context "${CI_PROJECT_DIR}/"
            --dockerfile "${CI_PROJECT_DIR}/docs/javadocs/Dockerfile"
            --destination "registry01.eps-dev.de/velocitymanager/javadocs/${CI_COMMIT_REF_SLUG}:latest"
    only:
        - main

deploy-javadocs-container:
    stage: java-docs
    image:
        name: "registry01.eps-dev.de/devops/deployment-containers/helmctl:latest"
        entrypoint: [""]
    needs:
        - build-javadocs-container
    script:
        - helm uninstall javadocs --namespace velocity-manager-dev || true
        - helm upgrade --install javadocs ./docs/javadocs/deployment/
          --values ./docs/javadocs/deployment/values.yaml
          --set image.repository=registry01.eps-dev.de/velocitymanager/javadocs/${CI_COMMIT_REF_SLUG}
          --set image.tag=latest
          --set ingress.hosts[0].host=velocitymanager.docs.eps-dev.de
          --set ingress.tls[0].secretName=velocitymanager.docs.eps-dev.de-tls
          --set ingress.tls[0].hosts[0]=velocitymanager.docs.eps-dev.de
          --namespace velocity-manager-dev
    only:
        - main

lint_java:
    image: maven:3.8.4-eclipse-temurin-16
    stage: linting
    needs: []
    script:
        - wget -O checkstyle.jar https://github.com/checkstyle/checkstyle/releases/download/checkstyle-9.3/checkstyle-9.3-all.jar
        - cd lib
        - java -jar checkstyle-9.3-all.jar -c /sun_checks.xml  .
